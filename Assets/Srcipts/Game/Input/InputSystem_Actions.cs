//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/LF/InputSetting/InputSystem_Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputSystem_Actions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputSystem_Actions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSystem_Actions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""df70fa95-8a34-4494-b137-73ab6b9c7d37"",
            ""actions"": [
                {
                    ""name"": ""OverViewMove"",
                    ""type"": ""Value"",
                    ""id"": ""351f2ccd-1f9f-44bf-9bec-d62ac5c5f408"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""OverViewRotate"",
                    ""type"": ""Value"",
                    ""id"": ""6b444451-8a00-4d00-a97e-f47457f736a8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""WalkThroughMove"",
                    ""type"": ""Value"",
                    ""id"": ""15447ca2-b60b-4d35-b45f-26d38f307642"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""WalkThroughRotate"",
                    ""type"": ""Value"",
                    ""id"": ""27e1a906-cdbb-49a6-a441-8b6ed8c24f36"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Scale"",
                    ""type"": ""Value"",
                    ""id"": ""ea494e6e-ec3f-4f27-96e3-6fe9930c4efe"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseInteractive"",
                    ""type"": ""Button"",
                    ""id"": ""b080f411-0ea0-4c15-a035-6ef321a0fc88"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseDoubleClickInteractive"",
                    ""type"": ""Button"",
                    ""id"": ""92ec355d-48f9-45f2-a400-879d9ef82afa"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""MultiTap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StopAutoRoaming"",
                    ""type"": ""Button"",
                    ""id"": ""46f12047-3106-413e-b344-4a6c24fb8d35"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UIEnter"",
                    ""type"": ""Button"",
                    ""id"": ""354e863a-58c9-4682-b894-23afb76509b4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""MouseMove"",
                    ""id"": ""98dda985-5d30-4c99-9eca-99f96486904f"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OverViewMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Modifier"",
                    ""id"": ""916227cc-8da7-4c33-bab9-2d4a5bbaad92"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OverViewMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Binding"",
                    ""id"": ""ae81d690-52b7-4fa5-91eb-46b5e0d78ccc"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""OverViewMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""MouseRotate"",
                    ""id"": ""d8b64210-852d-4524-b146-d57234051c4c"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OverViewRotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""c1a27f36-aabe-4be5-8815-5f63f78ccfbf"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OverViewRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""2a1d097b-3193-4cc0-b45d-649e17c1444b"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""OverViewRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""c6980f83-8382-46d4-80dd-27a040f68226"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WalkThroughMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""e331e51c-a2aa-4dc6-9aeb-39c4fb38fe31"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""WalkThroughMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""e8daa8d5-5e05-4867-9b12-0555434c6c3e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WalkThroughMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""7a7d97db-e1db-4149-9e7b-bf556e62cd92"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WalkThroughMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""5c17131c-a088-4f5e-ab68-9fe66658199b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WalkThroughMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""leftKeyRotate"",
                    ""id"": ""52a4431c-2e17-4977-8a25-3afd740fe32b"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WalkThroughRotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""30c57cb8-2aa1-472e-9e45-5d42ecd291ab"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WalkThroughRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Binding"",
                    ""id"": ""98fc6dcb-87c0-4318-8b1e-57c358b2815b"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""WalkThroughRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""480ba277-3694-4464-be78-8d8d35541409"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scale"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""821f430b-b534-4057-a9d9-c95fdf6a19be"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""MouseInteractive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4750f3e5-535b-4d80-92e5-9381b7e5370f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""MultiTap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseDoubleClickInteractive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4868614f-c5aa-4e5c-b6a4-fa1937b77223"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StopAutoRoaming"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d3ba419a-e8e5-477c-8fdb-6eac45e4d552"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""UIEnter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b12390d9-4d6d-4f20-9a96-d6990e35bf79"",
                    ""path"": ""<Keyboard>/numpadEnter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""UIEnter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_OverViewMove = m_Player.FindAction("OverViewMove", throwIfNotFound: true);
        m_Player_OverViewRotate = m_Player.FindAction("OverViewRotate", throwIfNotFound: true);
        m_Player_WalkThroughMove = m_Player.FindAction("WalkThroughMove", throwIfNotFound: true);
        m_Player_WalkThroughRotate = m_Player.FindAction("WalkThroughRotate", throwIfNotFound: true);
        m_Player_Scale = m_Player.FindAction("Scale", throwIfNotFound: true);
        m_Player_MouseInteractive = m_Player.FindAction("MouseInteractive", throwIfNotFound: true);
        m_Player_MouseDoubleClickInteractive = m_Player.FindAction("MouseDoubleClickInteractive", throwIfNotFound: true);
        m_Player_StopAutoRoaming = m_Player.FindAction("StopAutoRoaming", throwIfNotFound: true);
        m_Player_UIEnter = m_Player.FindAction("UIEnter", throwIfNotFound: true);
    }

    ~@InputSystem_Actions()
    {
        UnityEngine.Debug.Assert(!m_Player.enabled, "This will cause a leak and performance issues, InputSystem_Actions.Player.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_OverViewMove;
    private readonly InputAction m_Player_OverViewRotate;
    private readonly InputAction m_Player_WalkThroughMove;
    private readonly InputAction m_Player_WalkThroughRotate;
    private readonly InputAction m_Player_Scale;
    private readonly InputAction m_Player_MouseInteractive;
    private readonly InputAction m_Player_MouseDoubleClickInteractive;
    private readonly InputAction m_Player_StopAutoRoaming;
    private readonly InputAction m_Player_UIEnter;
    public struct PlayerActions
    {
        private @InputSystem_Actions m_Wrapper;
        public PlayerActions(@InputSystem_Actions wrapper) { m_Wrapper = wrapper; }
        public InputAction @OverViewMove => m_Wrapper.m_Player_OverViewMove;
        public InputAction @OverViewRotate => m_Wrapper.m_Player_OverViewRotate;
        public InputAction @WalkThroughMove => m_Wrapper.m_Player_WalkThroughMove;
        public InputAction @WalkThroughRotate => m_Wrapper.m_Player_WalkThroughRotate;
        public InputAction @Scale => m_Wrapper.m_Player_Scale;
        public InputAction @MouseInteractive => m_Wrapper.m_Player_MouseInteractive;
        public InputAction @MouseDoubleClickInteractive => m_Wrapper.m_Player_MouseDoubleClickInteractive;
        public InputAction @StopAutoRoaming => m_Wrapper.m_Player_StopAutoRoaming;
        public InputAction @UIEnter => m_Wrapper.m_Player_UIEnter;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @OverViewMove.started += instance.OnOverViewMove;
            @OverViewMove.performed += instance.OnOverViewMove;
            @OverViewMove.canceled += instance.OnOverViewMove;
            @OverViewRotate.started += instance.OnOverViewRotate;
            @OverViewRotate.performed += instance.OnOverViewRotate;
            @OverViewRotate.canceled += instance.OnOverViewRotate;
            @WalkThroughMove.started += instance.OnWalkThroughMove;
            @WalkThroughMove.performed += instance.OnWalkThroughMove;
            @WalkThroughMove.canceled += instance.OnWalkThroughMove;
            @WalkThroughRotate.started += instance.OnWalkThroughRotate;
            @WalkThroughRotate.performed += instance.OnWalkThroughRotate;
            @WalkThroughRotate.canceled += instance.OnWalkThroughRotate;
            @Scale.started += instance.OnScale;
            @Scale.performed += instance.OnScale;
            @Scale.canceled += instance.OnScale;
            @MouseInteractive.started += instance.OnMouseInteractive;
            @MouseInteractive.performed += instance.OnMouseInteractive;
            @MouseInteractive.canceled += instance.OnMouseInteractive;
            @MouseDoubleClickInteractive.started += instance.OnMouseDoubleClickInteractive;
            @MouseDoubleClickInteractive.performed += instance.OnMouseDoubleClickInteractive;
            @MouseDoubleClickInteractive.canceled += instance.OnMouseDoubleClickInteractive;
            @StopAutoRoaming.started += instance.OnStopAutoRoaming;
            @StopAutoRoaming.performed += instance.OnStopAutoRoaming;
            @StopAutoRoaming.canceled += instance.OnStopAutoRoaming;
            @UIEnter.started += instance.OnUIEnter;
            @UIEnter.performed += instance.OnUIEnter;
            @UIEnter.canceled += instance.OnUIEnter;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @OverViewMove.started -= instance.OnOverViewMove;
            @OverViewMove.performed -= instance.OnOverViewMove;
            @OverViewMove.canceled -= instance.OnOverViewMove;
            @OverViewRotate.started -= instance.OnOverViewRotate;
            @OverViewRotate.performed -= instance.OnOverViewRotate;
            @OverViewRotate.canceled -= instance.OnOverViewRotate;
            @WalkThroughMove.started -= instance.OnWalkThroughMove;
            @WalkThroughMove.performed -= instance.OnWalkThroughMove;
            @WalkThroughMove.canceled -= instance.OnWalkThroughMove;
            @WalkThroughRotate.started -= instance.OnWalkThroughRotate;
            @WalkThroughRotate.performed -= instance.OnWalkThroughRotate;
            @WalkThroughRotate.canceled -= instance.OnWalkThroughRotate;
            @Scale.started -= instance.OnScale;
            @Scale.performed -= instance.OnScale;
            @Scale.canceled -= instance.OnScale;
            @MouseInteractive.started -= instance.OnMouseInteractive;
            @MouseInteractive.performed -= instance.OnMouseInteractive;
            @MouseInteractive.canceled -= instance.OnMouseInteractive;
            @MouseDoubleClickInteractive.started -= instance.OnMouseDoubleClickInteractive;
            @MouseDoubleClickInteractive.performed -= instance.OnMouseDoubleClickInteractive;
            @MouseDoubleClickInteractive.canceled -= instance.OnMouseDoubleClickInteractive;
            @StopAutoRoaming.started -= instance.OnStopAutoRoaming;
            @StopAutoRoaming.performed -= instance.OnStopAutoRoaming;
            @StopAutoRoaming.canceled -= instance.OnStopAutoRoaming;
            @UIEnter.started -= instance.OnUIEnter;
            @UIEnter.performed -= instance.OnUIEnter;
            @UIEnter.canceled -= instance.OnUIEnter;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    private int m_XRSchemeIndex = -1;
    public InputControlScheme XRScheme
    {
        get
        {
            if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
            return asset.controlSchemes[m_XRSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnOverViewMove(InputAction.CallbackContext context);
        void OnOverViewRotate(InputAction.CallbackContext context);
        void OnWalkThroughMove(InputAction.CallbackContext context);
        void OnWalkThroughRotate(InputAction.CallbackContext context);
        void OnScale(InputAction.CallbackContext context);
        void OnMouseInteractive(InputAction.CallbackContext context);
        void OnMouseDoubleClickInteractive(InputAction.CallbackContext context);
        void OnStopAutoRoaming(InputAction.CallbackContext context);
        void OnUIEnter(InputAction.CallbackContext context);
    }
}
